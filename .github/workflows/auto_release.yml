name: auto release

on:
  push:
    paths-ignore:
      - .github/workflows/ci.yml
      - README.*
    branches:
      - master
      - releases/**

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      OUT_DIR: ./packages/transparent-info-app/out
      IPNS: /ipns/Qmd3HzpnpSsLeUQF2mJEXn24a1yYo2LTaQyoq4mwxkse1Z
      IPNS_ID: Qmd3HzpnpSsLeUQF2mJEXn24a1yYo2LTaQyoq4mwxkse1Z
    steps:
      - name: check prerelease
        if: endsWith(github.event.head_commit.message,':prerelease')
        run: |
          echo "::set-env name=RELEASE_TYPE::prerelease"
          echo "::set-env name=PRERELEASE::true"
          echo "::set-env name=NEED_RELEASE::yes"
      - name: check release
        if: endsWith(github.event.head_commit.message,':release')
        run: |
          echo "::set-env name=RELEASE_TYPE::release"
          echo "::set-env name=PRERELEASE::false"
          echo "::set-env name=NEED_RELEASE::yes"
      # - name: exit if needn't release
      #   if: env.NEED_RELEASE != 'yes'
      #   run: |
      #     echo "needn't release"
      #     exit 1
      - uses: actions/checkout@v2
        if: env.NEED_RELEASE == 'yes'
      - run: sudo timedatectl set-timezone Asia/Shanghai
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        if: env.NEED_RELEASE == 'yes'
        with:
          node-version: 12.x
      - name: build and export
        if: env.NEED_RELEASE == 'yes'
        env:
          ASSETS_PREFIX: ${{ env.IPNS }}
          BASE_PATH: ${{ env.IPNS }}
        run: |
          echo "::set-env name=VERSION::$(cat lerna.json|jq -r .version)"
          yarn
          yarn boot
          yarn gen
          yarn build
          yarn export
      - name: setup ipfs and add to ipfs network
        if: env.NEED_RELEASE == 'yes'
        run: |
          wget https://github.com/ipfs/go-ipfs/releases/download/v0.4.22/go-ipfs_v0.4.22_linux-amd64.tar.gz
          tar -xf ./go-ipfs_v0.4.22_linux-amd64.tar.gz
      - name: add to ipfs
        if: env.NEED_RELEASE == 'yes'
        run: |
          cp -r "${{ env.OUT_DIR }}" ./out
          find ./out ! -path ./out  |egrep -v _next |xargs rm -rf

          # replace basePath
          chunk=$(grep -R '${{ env.IPNS }}' ./out |awk -F ':' '{print $1}')
          echo "will edit $chunk"
          hackCode='/(\\/ip[fn]s\\/[^\\/]+)/.exec(window.location.pathname)[1]'
          sed -i -e "s|\"${{ env.IPNS }}\"|$hackCode|g" $chunk

          ./go-ipfs/ipfs  --api=/dns4/ncov.fox.mn/tcp/5001 add -r ./out/ --hidden |tee -a assets_rst.log
          ASSETS_IPFS_CID=$(cat  ./assets_rst.log | tail -n 1 | awk '{print $2}')
          echo "::set-env name=ASSETS_IPFS_CID::${ASSETS_IPFS_CID}"
          rm -f ./assets_rst.log
          rm -rf ./out
      - name: add rest to ipfs
        if: env.NEED_RELEASE == 'yes'
        run: |
          cp -r "${{ env.OUT_DIR }}" ./out
          rm -rf ./out/_next
          find ./out -type f |xargs -I ^_^  sed -i -e "s|${{ env.IPNS }}|/ipfs/${{ env.ASSETS_IPFS_CID }}|g" ^_^
          ./go-ipfs/ipfs  --api=/dns4/ncov.fox.mn/tcp/5001 add -r ./out/ --hidden |tee -a rst.log
          IPFS_CID=$(cat  ./rst.log | tail -n 1 | awk '{print $2}')
          echo "::set-env name=IPFS_CID::${IPFS_CID}" 
          rm -f rst.log
          rm -rf ./out
      - name: update dns record
        if: env.NEED_RELEASE == 'yes' && env.RELEASE_TYPE == 'release'
        run: |
          dt="${{secrets.DNSPOD_TOKEN}}"
          domain_id="62967876"
          rid=537209805
          sname="_dnslink.dncov"
          curl -X POST https://dnsapi.cn/Record.Modify -d "login_token=$dt&format=json&domain_id=$domain_id&record_id=$rid&sub_domain=$sname&value=dnslink=/ipfs/${{ env.IPFS_CID }}&record_type=TXT&record_line_id=10%3D0"
      - name: update backup dns record
        if: env.NEED_RELEASE == 'yes' && env.RELEASE_TYPE == 'release'
        run: |
          dt="${{secrets.DNSPOD_TOKEN}}"
          domain_id="62967876"
          rid=537502021
          sname="latest.dncov"
          curl -X POST https://dnsapi.cn/Record.Modify -d "login_token=$dt&format=json&domain_id=$domain_id&record_id=$rid&sub_domain=$sname&value=dnslink=/ipfs/${{ env.IPFS_CID }}&record_type=TXT&record_line_id=10%3D0"
      - name: Generate build number
        if: env.NEED_RELEASE == 'yes'
        id: buildnumber
        uses: einaregilsson/build-number@v2
        with:
          token: ${{secrets.github_token}}
      - name: Create Release
        if: env.NEED_RELEASE == 'yes'
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}.${{ steps.buildnumber.outputs.build_number }}
          release_name: Release ${{ env.VERSION }}.${{ steps.buildnumber.outputs.build_number }}
          body: |
            # release summary
            |                 |
            | --------------- |
            | ASSETS_IPFS_CID | \${{ env.ASSETS_IPFS_CID }} |
            | ROOT_CID        | \${{ env.IPFS_CID }} |
            | IPNS            | \${{ env.IPNS_ID }} |
            # centralized
            [dncov.fox.mn](https://dncov.fox.mn)

            # decentralized

            ## global
            https://ipfs.io/ipfs/${{ env.IPFS_CID }}
            https://ipfs.infura.io/ipfs/${{ env.IPFS_CID }}

            ## for chaina
            http://ncov.fox.mn:2020/ipfs/${{ env.IPFS_CID }}

          draft: false
          prerelease: ${{ env.PRERELEASE }}
      - name: gen file name
        if: env.NEED_RELEASE == 'yes'
        run: |
          name=$(cat ./packages/transparent-info-app/package.json |jq -r .name)
          fileName=${name}-${{ env.VERSION }}.${{ steps.buildnumber.outputs.build_number }}.tar.gz
          tar  -cf "./${fileName}"   ./packages/transparent-info-app/out
          echo "::set-env name=FILE_NAME::${fileName}"

      - name: Upload Release Asset
        if: env.NEED_RELEASE == 'yes'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ env.FILE_NAME }}
          asset_name: ${{ env.FILE_NAME }}
          asset_content_type: application/gzip
      - name: publish ipns and pin
        if: env.NEED_RELEASE == 'yes' && env.RELEASE_TYPE == 'release'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT }}
          script: |
            #/home/pi/go/bin/ipfs pin add ${{ env.IPFS_CID }}
            /home/pi/go/bin/ipfs name  publish  --key=dncov ${{ env.IPFS_CID }}
      - name: rebuild-for-centralize
        if: env.NEED_RELEASE == 'yes' && env.RELEASE_TYPE == 'release'
        run: |
          echo "IPFS_CID=${{ env.IPFS_CID }}   ASSETS_IPFS_CID=${{ env.ASSETS_IPFS_CID }}"
          yarn clean
          yarn gen
          yarn build
          yarn export
      - name: cp to cout
        if: env.NEED_RELEASE == 'yes' && env.RELEASE_TYPE == 'release'
        run: |
          cp -r  ${{ env.OUT_DIR }} ./cout
      - name: upload
        if: env.NEED_RELEASE == 'yes' && env.RELEASE_TYPE == 'release'
        run: |
          qshell  qupload2   \
          --bucket  ${{ secrets.QN_BUCKET }}  \
          --overwrite  \
          --src-dir . \
          --log-file ../upload.log \
          --thread-count 100
        working-directory: ./cout
      - uses: actions/upload-artifact@v1
        if: env.NEED_RELEASE == 'yes' && env.RELEASE_TYPE == 'release'
        with:
          name: upload.log
          path: ./upload.log
